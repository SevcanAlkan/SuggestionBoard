@using SuggestionBoard.Data.ViewModel
@using SuggestionBoard.Core.ViewModel
@using SuggestionBoard.Core.Enum
@model SuggestionDetailVM

<style>
    /* the width of the entire in div of id=product */
    #categories {
        width: 100%;
    }
        /* any item in the div of id=product with its class having dropdownlist */
        #categories .dropdownlist {
            font-size: 18px;
        }
        /* any dropdown in product id div */
        #categories select {
            color: blue;
        }
        /* specifically, any item with id of ddlCategories in the div of id=product */
        #categories #ddlCategories {
            color: red;
        }
</style>

@{
    bool isNewRecord = Model == null || Model.Id == null || Model.Id == Guid.Empty;

    ViewData["Title"] = "Suggestion Detail";
}

@if (isNewRecord)
{
    <h2>Send New Suggestion</h2>
}
else
{
    <div class="row">
        <div class="col-8">
            <h2>@(Model.CanEdit? "Edit": "View") Suggestion</h2>
        </div>
        <div class="col-4">
            @await Html.PartialAsync("_ReactionButtonGroup", Model.Id)
        </div>
    </div>

}

@{
    int dayCount = Model.Rec.CreateDT != DateTime.MinValue ? (int)Math.Round((DateTime.UtcNow - Model.Rec.CreateDT).TotalDays) : 0;
}

<ul class="list-inline">
    <li class="list-inline-item">@dayCount days ago</li>
    <li class="list-inline-item">@Model.Rec.LikeAmount like</li>
    <li class="list-inline-item">@Model.Rec.DislikeAmount dislike</li>
    <li class="list-inline-item">@(Model.SuggestionComments !=null ? Model.SuggestionComments.Count.ToString() : "0") comment</li>
    <li class="list-inline-item">@Model.TotalReaction reaction point</li>
</ul>

@if (Model.CanEdit || isNewRecord)
{
    @using (Html.BeginForm("Detail"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.GeneralError)

        <div class="form-group">
            @Html.LabelFor(model => model.Rec.Title)
            @Html.EditorFor(model => model.Rec.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Rec.Title, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Rec.Description)
            @Html.EditorFor(model => model.Rec.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Rec.Description, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @{
                var categoryList = new SelectList((Model.Categories != null ?
                Model.Categories : new List<SelectListVM>()), "Id", "Text");
            }
            <div class="row">
                <div class="col-12">
                    @Html.LabelFor(model => model.Rec.CategoryId)
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @Html.DropDownListFor(model => model.Rec.CategoryId, categoryList,
                        new { htmlAttributes = new { @class = "form-control dropdown" } })
                    @Html.ValidationMessageFor(model => model.Rec.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @Html.Hidden("Rec.Id", Model.Id)

        <input type="submit" value="@(!isNewRecord? "Update": "Create")" class="btn btn-success btn-lg" />
    }
}
else
{
    <div class="form-group">
        @Html.LabelFor(model => model.Rec.Title)
        @Html.EditorFor(model => model.Rec.Title, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Rec.Description)
        @Html.EditorFor(model => model.Rec.Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="row col-12">
        <label for="senderLink" style="margin-right:0.5rem">Sender:</label>
        <a id="senderLink" asp-action="Profile" asp-controller="User" asp-route-id="@Model.Rec.CreateBy">@Model.Rec.CreateByName</a>
    </div>

}

<br />

<div>
    @Html.ActionLink("Back to List", "Index", "Home")
    <br />
    @if (!isNewRecord && Model.CanEdit)
    {
        @Html.ActionLink("Delete", "Delete", "Suggestion", new { id = Model.Id })
    }
</div>

<br />

@if (!isNewRecord)
{
    <div class="row">
        <div class="col-8">
            <p class="h5">Comments</p>

            <div class="row">
                @await Html.PartialAsync("_CommentList", Model.SuggestionComments)
            </div>

            <div class="row">

                @{
                    SuggestionCommentSaveVM commentModel;

                    if (ViewData["CommentFormData"] != null && ViewData["CommentFormData"] is SuggestionCommentSaveVM)
                    {
                        commentModel = (SuggestionCommentSaveVM)ViewData["CommentFormData"];
                    }
                    else
                    {
                        commentModel = new SuggestionCommentSaveVM();
                    }

                    commentModel.SuggestionId = Model.Id;
                }

                @await Html.PartialAsync("_CommentForm", commentModel)

            </div>

        </div>
        <div class="col-4">
            <p class="h5">Likes & Dislikes</p>

            <div class="row">
                @await Html.PartialAsync("_ReactionList", Model.SuggestionReactions)
            </div>

        </div>
    </div>
}


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
